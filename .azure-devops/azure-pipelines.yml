trigger:
  branches:
    include:
    - master
    - develop
    - feature/*
    - bugfix/*
    - release/*
    - hotfix/*
  paths:
    include:
    - 'src/*'
    - 'tests/*'
    exclude:
    - '.azuredevops/*'

pr:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - '.azuredevops/*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  coberturaOutputFormat: '/p:CoverletOutputFormat=cobertura'
  coverageDirectory: '$(Build.ArtifactStagingDirectory)/coverage/'
stages:
  - stage: CalculateVersionStage
    displayName: 'Calculate Version'
    jobs:
      - job: CalculateVersion
        displayName: 'Calculate version number using GitVersion'
        steps:
          - checkout: self
            fetchDepth: 0
            clean: true

          - task: UseDotNet@2
            displayName: 'Use .Net 8.0'
            inputs:
              packageType: 'sdk'
              version: '8.x'

          - task: gitversion/setup@0
            displayName: 'Install GitVersion'
            inputs:
              versionSpec: '5.x'

          - task: gitversion/execute@0
            displayName: 'Use GitVersion'
            name: Version # the step MUST be named to access its output variables in another stage.

          - script: |
              echo "##vso[task.setvariable variable=NuGetVersion]$(Version.NuGetVersion)"
            displayName: 'Set NuGetVersion variable'
          
  - stage: Build
    displayName: 'Build Angular and .NET Projects'
    jobs:
    - job: Build
      displayName: 'Build Angular and .NET Projects'

      steps:
      - task: NodeTool@0
        displayName: 'Install Node.js 22.x'
        inputs:
          versionSpec: '22.x'
          checkLatest: true

      - script: |
          npm install -g @angular/cli@17
        displayName: 'Install Angular CLI 17'

      - script: |
          cd src/aiglusoft.iam.client
          npm install
        displayName: 'Install Angular Dependencies'

      - script: |
          cd src/aiglusoft.iam.client
          ng build --output-path=../Aiglusoft.IAM.Server/wwwroot
        displayName: 'Build Angular Project and Copy to wwwroot'

      - script: |
          cd src/aiglusoft.iam.client
          ng test --watch=false --browsers=ChromeHeadless --code-coverage
        displayName: 'Run Angular Unit Tests and Generate Coverage'

      # - task: PublishCodeCoverageResults@1
      #   displayName: 'Publish Angular Code Coverage Results'
      #   inputs:
      #     codeCoverageTool: 'Cobertura'
      #     summaryFileLocation: 'src/aiglusoft.iam.client/coverage/coverage-summary.json'
      #     reportDirectory: 'src/aiglusoft.iam.client/coverage'
      #     failIfCoverageEmpty: true

      - task: UseDotNet@2
        displayName: 'Install .NET SDK 8.x'
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: DotNetCoreCLI@2
        displayName: 'Restore NuGet Packages'
        inputs:
          command: 'restore'
          projects: '$(solution)'

      - task: DotNetCoreCLI@2
        displayName: 'Build Solution'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '--configuration $(buildConfiguration) --no-restore'

      # Task to run unit tests
      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: 'test'
          projects: 'tests/Aiglusoft.IAM.Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --no-restore $(coberturaOutputFormat) /p:CollectCoverage=true /p:CoverletOutput=$(coverageDirectory)Aiglusoft.IAM.Tests/'

      # Task to run end-to-end tests
      - task: DotNetCoreCLI@2
        displayName: 'Run end-to-end tests'
        inputs:
          command: 'test'
          projects: 'tests/Aiglusoft.IAM.E2ETests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --no-restore $(coberturaOutputFormat) /p:CollectCoverage=true /p:CoverletOutput=$(coverageDirectory)Aiglusoft.IAM.E2ETests/'

      # Publish build artifacts
      - task: PublishBuildArtifacts@1
        displayName: 'Publish build artifacts'
        inputs:
          pathToPublish: '$(coverageDirectory)'
          artifactName: 'coverage'
          publishLocation: 'Container'

      # Publish code coverage results
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage results'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(coverageDirectory)/**/coverage.cobertura.xml'
          reportDirectory: '$(coverageDirectory)'
          failIfCoverageEmpty: true

      - task: DotNetCoreCLI@2
        displayName: 'Publish Web Projects'
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish .NET Build Artifacts'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'dotnet-app'
          publishLocation: 'Container'
