parameters:
  - name: vmImage
    type: string
    default: 'ubuntu-latest'
  - name: nodeVersion
    type: string
    default: '20.x'
  - name: app
    type: string
  - name: angularAppPath
    type: string
    default: ''
  - name: wwwrootPath
    type: string
    default: ''
  - name: dockerfilePath
    type: string
  - name: dockerRegistryServiceConnection
    type: string
  - name: npmFeed
    type: string
    default: 'aiglusoft_npm_packages'
  - name: dockerRepository
    type: string
  - name: angularArtifactName
    type: string
    default: ''
  - name: projectPath
    type: string
  - name: buildConfiguration
    type: string
    default: 'Release'
  - name: coberturaOutputFormat
    type: string
    default: '/p:CoverletOutputFormat=cobertura'
  - name: unitTestPath
    type: string
    default: ''
  - name: e2eTestPath
    type: string
    default: ''

stages:
- stage: BuildAll
  displayName: 'Build and Push'
  jobs:
    - job: BuildAllJobs
      displayName: 'Build and Test Projects'
      pool:
        vmImage: ${{ parameters.vmImage }}
      variables:
        # Variables to store GitVersion output
        fullSemVer: ''
        semVer: ''
        dockerImageName: ''
        ShouldPublish: 'false'
      steps:
      
      # Step 1: Checkout the source code
      - checkout: self
        fetchDepth: 0
      
      # Step 2: Install GitVersion and determine the version
      - task: gitversion/setup@1.2.0
        displayName: 'Install GitVersion'
        inputs:
          versionSpec: '5.x'
      
      - task: gitversion/execute@1.2.0
        displayName: 'Determine Version with GitVersion'
        name: version_step
        inputs:
          useConfigFile: true
          configFilePath: 'GitVersion.yml'
          updateAssemblyInfo: true
        continueOnError: false
        # Capture GitVersion outputs
      - script: |
          echo "##vso[task.setvariable variable=fullSemVer]$(version_step.FullSemVer)"
          echo "##vso[task.setvariable variable=semVer]$(version_step.SemVer)"
        displayName: 'Set GitVersion variables'
      
      # Step 3: Build Angular app (if angularAppPath is provided)
      - ${{ if ne(parameters.angularAppPath, '') }}:
        - task: UseNode@1
          displayName: 'Install Node.js ${{ parameters.nodeVersion }}'
          inputs:
            version: ${{ parameters.nodeVersion }}
        
        - script: |
            npm install -g @angular/cli@18
          displayName: 'Install Angular CLI'
        
        - task: Npm@1
          inputs:
            command: 'custom'
            workingDir: '${{ parameters.angularAppPath }}'
            customCommand: 'install --legacy-peer-deps'
            customRegistry: 'useFeed'
            customFeed: '${{ parameters.npmFeed }}'
          displayName: 'Install Angular dependencies for ${{ parameters.app }}'
        
        - task: Npm@1
          inputs:
            command: 'custom'
            workingDir: '${{ parameters.angularAppPath }}'
            customCommand: 'run build -- --configuration production --output-path dist/${{ parameters.app }}'
            customRegistry: 'useFeed'
            customFeed: '${{ parameters.npmFeed }}'
          displayName: 'Build Angular app ${{ parameters.app }}'
        
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Angular Artifact: ${{ parameters.angularArtifactName }}'
          inputs:
            targetPath: ${{ parameters.angularAppPath }}/dist/${{ parameters.app }}
            artifact: ${{ parameters.angularArtifactName }}
            publishLocation: 'pipeline'
      
      # Step 4: Build .NET project
      - task: UseDotNet@2
        displayName: 'Install .NET SDK 8.x'
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet
      
      - task: DotNetCoreCLI@2
        displayName: 'Restore NuGet Packages'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
      
      - task: DotNetCoreCLI@2
        displayName: 'Build .NET Solution'
        inputs:
          command: 'build'
          projects: '**/*.csproj'
          arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'
      
      - ${{ if parameters.unitTestPath }}:
        - task: DotNetCoreCLI@2
          displayName: 'Run Unit Tests'
          inputs:
            command: 'test'
            projects: ${{ parameters.unitTestPath }}
            arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore ${{ parameters.coberturaOutputFormat }} /p:CollectCoverage=true /p:CoverletOutput=$(Build.ArtifactStagingDirectory)/coverage/UnitTests/'
      
      - ${{ if parameters.e2eTestPath }}:
        - task: DotNetCoreCLI@2
          displayName: 'Run End-to-End Tests'
          inputs:
            command: 'test'
            projects: ${{ parameters.e2eTestPath }}
            arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore ${{ parameters.coberturaOutputFormat }} /p:CollectCoverage=true /p:CoverletOutput=$(Build.ArtifactStagingDirectory)/coverage/E2ETests/'
            continueOnError: true
      
      - ${{ if or(parameters.e2eTestPath, parameters.unitTestPath) }}:
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Coverage Artifacts'
          inputs:
            pathToPublish: $(Build.ArtifactStagingDirectory)/coverage/
            artifactName: 'coverage'
            publishLocation: 'Container'
          continueOnError: true
        
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage Results'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Build.ArtifactStagingDirectory)/coverage/**/coverage.cobertura.xml'
            reportDirectory: $(Build.ArtifactStagingDirectory)/coverage/
            failIfCoverageEmpty: true
          continueOnError: true
      
      # Step 5: Build and push Docker image
      - ${{ if and(ne(parameters.wwwrootPath, ''), ne(parameters.angularArtifactName, '')) }}:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Angular Artifact: ${{ parameters.angularArtifactName }}'
          inputs:
            artifact: ${{ parameters.angularArtifactName }}
            path: '${{ parameters.wwwrootPath }}'
      
      - task: Docker@2
        displayName: 'Build Docker Image'
        inputs:
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
          repository: '${{ parameters.dockerRepository }}/${{ parameters.app }}'
          command: 'build'
          Dockerfile: ${{ parameters.dockerfilePath }}
          buildContext: '.'
          tags: |
            $(semVer)
      
      - script: |
          echo "##vso[task.setvariable variable=ShouldPublish]false"
          if [[ "$(Build.SourceBranch)" =~ ^refs/heads/(main|master|develop|release[/-].*|hotfix[/-].*)$ ]]; then
            echo "##vso[task.setvariable variable=ShouldPublish]true"
          fi
        displayName: 'Evaluate Branch for Docker Push'
      
      - task: Docker@2
        displayName: 'Push Docker Image'
        condition: eq(variables['ShouldPublish'], 'true')
        inputs:
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
          repository: '${{ parameters.dockerRepository }}/${{ parameters.app }}'
          command: 'push'
          tags: |
            $(semVer)
